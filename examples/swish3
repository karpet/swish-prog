#!/usr/bin/env perl
#
# SWISH::Prog-based swish3 example

use strict;
use warnings;
use Carp;
use SWISH::Prog;
use Getopt::Long qw(:config no_ignore_case);

my $VERSION = '3.0.0';

my $USAGE = qq{$0 
 usage:
    swish [-e] [-i dir file ... ] [-S aggregator] [-c file] [-f invindex] [-l] [-v (num)]
    swish -w word1 word2 ... [-f file1 file2 ...] \
          [-P phrase_delimiter] [-p prop1 ...] [-s sortprop1 [asc|desc] ...] \
          [-m num] [-t str] [-d delim] [-H (num)] [-x output_format] \
          [-R rank_scheme] [-L prop low high]
    swish -k (char|*) [-f invindex1 invindex2 ...]
    swish -M invindex1 invindex2 ... outputfile
    swish -N /path/to/compare/file
    swish -V

 options: defaults are in brackets
 # commented options are not yet supported
    #-b : begin results at this number
    -c : configuration file(s) to use for indexing
    #-d : next param is delimiter.
    -D  : Debug mode
    #-E : Append errors to file specified, or stderr if file not specified.
    #-e : "Economic Mode": The index proccess uses less RAM.
    -f : invindex dir to create or search from [index.swish]
    -F : next param is invindex format
    #-H : "Result Header Output": verbosity (0 to 9)  [1].
    -i : create an index from the specified files
        for "-S fs" - specify a list of files or directories
        for "-S spider" - specify a list of URLs
    #-k : Print words starting with a given char.
    #-l : follow symbolic links when indexing
    #-L : Limit results to a range of property values
    #-M : merges index files
    #-m : the maximum number of results to return [defaults to all results]
    #-N : index only files with a modification date newer than path supplied
    #-P : next param is Phrase delimiter.
    #-p : include these document properties in the output "prop1 prop2 ..."
    #-R : next param is Rank Scheme number (0 to 1)  [0].
    -S : specify which indexing system to use.
    Valid options are:
        "fs" - index local files in your File System
        "spider" - index web site files using a web crawler
    The default value is: "fs"
    -s : sort by these document properties in the output "prop1 prop2 ..."
    #-T : Trace options ('-T help' for info)
    #-t : tags to search in - specify as a string
    #    "HBthec" - in Head|Body|title|header|emphasized|comments
    -V : prints the current version
    -v : indexing verbosity level (0 to 3) [-v 1]
    -w : search for words "word1 word2 ..."
    #-W : next param is ParserWarnLevel [-W 2]
    #-x : "Extended Output Format": Specify the output format.

version: $VERSION
 docs: http://swish-e.org
};

my $Opt = {
    verbose  => 0,
    Version  => 0,
    Debug    => 0,
    config   => '',         #SWISH::Prog::Config->new
    Warnings => 0,
    Source   => 'fs',
    Format   => 'native',
    query    => '',
    input    => 0,
};

my %allopts = (
    'config=s'            => 'config file',
    'verbose'             => 'be verbose',
    'debug|Debug'         => 'debugging',
    'Warnings=i'          => 'print libxml2 warnings',
    'aggregator|Source=s' => 'aggregator type',
    'Format=s'            => 'indexer type (native, ks, xapian, dbi)',
    'query|words=s'       => 'search query',
    'input'               => 'indexing mode',
);

GetOptions( $Opt, keys %allopts ) or die $USAGE;

#croak $USAGE unless @ARGV;

if ( $Opt->{input} ) {
    $Opt->{indexer} = $Opt->{Format};
}

Data::Dump::dump $Opt;

my $prog = SWISH::Prog->new(%$Opt);
if ( $Opt->{input} ) {
    $prog->index(@ARGV);
}
elsif ( $Opt->{query} ) {
    my $invindex = $prog->invindex;
    my $meta     = $invindex->meta;
    my $format   = $meta->Index->{Format};
    my $sclass
        = $format eq 'Native'
        ? 'SWISH::Prog::Searcher::Native'
        : "SWISH::Prog::${format}::Searcher";
    eval "require $sclass";
    croak $@ if $@;
    my $searcher = $sclass->new(
        invindex => $invindex->path . '',
        config   => $prog->config,
    );
    my $results = $searcher->search( $Opt->{query} );

    while ( my $result = $results->next ) {
        printf( qq{%4d %s "%s"\n},
            $result->score, $result->uri, $result->title );
    }
}
elsif ( $Opt->{Version} ) {
    print "$0 $VERSION\n";
}
else {
    print $USAGE;
}
exit;

=pod

=head1 AUTHOR

Peter Karman, E<lt>perl@peknet.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2008 by Peter Karman

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

=cut

